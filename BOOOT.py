import telebot
from telebot import types
import tensorflow as tf
import numpy as np
import os
import sqlite3
import hashlib
import secrets
from datetime import datetime, timedelta
from tensorflow.keras.preprocessing import image

# Bot configuration
TOKEN = '7593523748:AAGtmDsBVFQ1fVN2X_yKHtJphDPHJRafefY'
bot = telebot.TeleBot(TOKEN)

# SQLite database setup
conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()

# Create users table if it doesn't exist
cursor.execute('''CREATE TABLE IF NOT EXISTS users
                 (chat_id INTEGER PRIMARY KEY,
                  password TEXT,
                  logged_in BOOLEAN,
                  predictions_count INTEGER DEFAULT 0)''')

# Create admins table if it doesn't exist
cursor.execute('''CREATE TABLE IF NOT EXISTS admins
                 (chat_id INTEGER PRIMARY KEY,
                  username TEXT)''')
conn.commit()

# Ensure predictions_count column exists in users table
cursor.execute("PRAGMA table_info(users)")
columns = [row[1] for row in cursor.fetchall()]
if "predictions_count" not in columns:
    cursor.execute("ALTER TABLE users ADD COLUMN predictions_count INTEGER DEFAULT 0")
    conn.commit()

# State management
user_states = {}
login_attempts = {}

# TensorFlow model setup (retained for potential future use)
model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3, 3), activation='relu', input_shape=(200, 200, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3, 3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dense(1, activation='sigmoid')
])
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])
model.load_weights('best_weights.h5')

# Password handling
def hash_password(password):
    salt = secrets.token_hex(8)
    hashed = hashlib.sha256((password + salt).encode()).hexdigest()
    return f"{salt}:{hashed}"

def check_password(hashed_password, user_password):
    salt, hashed = hashed_password.split(':')
    return hashed == hashlib.sha256((user_password + salt).encode()).hexdigest()

# Admin check
def is_admin(chat_id):
    cursor.execute("SELECT * FROM admins WHERE chat_id=?", (chat_id,))
    return cursor.fetchone() is not None

# Keyboards
def create_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton('/register'), types.KeyboardButton('/login'))
    markup.row(types.KeyboardButton('/predict'), types.KeyboardButton('/logout'))
    markup.row(types.KeyboardButton('/user_info'))
    return markup

def create_admin_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row(types.KeyboardButton('/list_users'), types.KeyboardButton('/delete_user'))
    markup.row(types.KeyboardButton('/add_admin'), types.KeyboardButton('/admin_exit'))
    return markup

# Command handlers
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    # Auto-assign first user as admin if no admins exist
    cursor.execute("SELECT COUNT(*) FROM admins")
    if cursor.fetchone()[0] == 0:
        cursor.execute("INSERT INTO admins VALUES (?, ?)", 
                      (chat_id, message.from_user.username or str(chat_id)))
        conn.commit()
        bot.send_message(chat_id, "üëë –í—ã —Å—Ç–∞–ª–∏ –ø–µ—Ä–≤—ã–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
    
    welcome_message = (
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–∞–Ω–¥ –∏ –ª—é–¥–µ–π üêºüë§.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/register ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n"
        "/login ‚Äî –≤—Ö–æ–¥\n"
        "/predict ‚Äî –≤—ã–≤–æ–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è\n"
        "/user_info ‚Äî –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ\n"
        "/logout ‚Äî –≤—ã—Ö–æ–¥\n"
        "–ê–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /admin_help –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–∞–Ω–¥."
    )
    bot.send_message(chat_id, welcome_message, reply_markup=create_main_keyboard())

@bot.message_handler(commands=['admin_help'])
def admin_help(message):
    chat_id = message.chat.id
    if not is_admin(chat_id):
        bot.send_message(chat_id, "üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return

    admin_commands = """
üõ† <b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>

/admin_help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/list_users ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/add_admin <code>chat_id</code> ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∞–¥–º–∏–Ω–∞
/remove_admin <code>chat_id</code> ‚Äî —Å–Ω—è—Ç—å –∞–¥–º–∏–Ω–∞
/list_admins ‚Äî —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤
/delete_user <code>chat_id</code> ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
/send_all <code>—Ç–µ–∫—Å—Ç</code> ‚Äî —Ä–∞—Å—Å—ã–ª–∫–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
"""
    bot.send_message(chat_id, admin_commands, parse_mode="HTML", reply_markup=create_admin_keyboard())

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    chat_id = message.chat.id
    if not is_admin(chat_id):
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    bot.send_message(chat_id, "–ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:", reply_markup=create_admin_keyboard())

@bot.message_handler(commands=['admin_exit'])
def admin_exit(message):
    chat_id = message.chat.id
    if not is_admin(chat_id):
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    bot.send_message(chat_id, "–í—ã—Ö–æ–¥ –∏–∑ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.", reply_markup=create_main_keyboard())

@bot.message_handler(commands=['list_users'])
def list_users(message):
    chat_id = message.chat.id
    if not is_admin(chat_id):
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    cursor.execute('''SELECT u.chat_id, u.logged_in, u.predictions_count, 
                      a.chat_id IS NOT NULL as is_admin 
                      FROM users u LEFT JOIN admins a ON u.chat_id = a.chat_id''')
    users = cursor.fetchall()
    if not users:
        bot.send_message(chat_id, "–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return
    
    response = "üìä –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for user in users:
        status = "‚úÖ –í —Å–µ—Ç–∏" if user[1] else "‚ùå –ù–µ –≤ —Å–µ—Ç–∏"
        role = "üëë –ê–¥–º–∏–Ω" if user[3] else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        response += f"ID: {user[0]}\n{status} | {role}\n–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {user[2]}\n\n"
    bot.send_message(chat_id, response)

@bot.message_handler(commands=['delete_user'])
def delete_user(message):
    chat_id = message.chat.id
    if not is_admin(chat_id):
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    user_states[chat_id] = 'awaiting_user_id_for_deletion'
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:")

@bot.message_handler(commands=['add_admin'])
def add_admin(message):
    chat_id = message.chat.id
    if not is_admin(chat_id):
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    user_states[chat_id] = 'awaiting_admin_id'
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:")

@bot.message_handler(commands=['remove_admin'])
def remove_admin(message):
    chat_id = message.chat.id
    if not is_admin(chat_id):
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    user_states[chat_id] = 'awaiting_admin_id_for_removal'
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Å–Ω—è—Ç–∏—è –ø—Ä–∞–≤:")

@bot.message_handler(commands=['list_admins'])
def list_admins(message):
    chat_id = message.chat.id
    if not is_admin(chat_id):
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    cursor.execute("SELECT chat_id, username FROM admins")
    admins = cursor.fetchall()
    if not admins:
        bot.send_message(chat_id, "–ù–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
        return
    response = "üëë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤:\n\n"
    for admin in admins:
        response += f"ID: {admin[0]} | –ò–º—è: {admin[1] or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    bot.send_message(chat_id, response)

@bot.message_handler(commands=['send_all'])
def send_all(message):
    chat_id = message.chat.id
    if not is_admin(chat_id):
        bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    user_states[chat_id] = 'awaiting_broadcast_message'
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")

@bot.message_handler(commands=['register'])
def register(message):
    chat_id = message.chat.id
    cursor.execute("SELECT * FROM users WHERE chat_id=?", (chat_id,))
    if cursor.fetchone():
        bot.send_message(chat_id, "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login.")
        return
    user_states[chat_id] = 'registering'
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")

@bot.message_handler(commands=['login'])
def login(message):
    chat_id = message.chat.id
    cursor.execute("SELECT * FROM users WHERE chat_id=?", (chat_id,))
    if not cursor.fetchone():
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /register!")
        return
    if chat_id in login_attempts and login_attempts[chat_id]['attempts'] >= 3:
        if datetime.now() < login_attempts[chat_id]['block_time']:
            remaining = (login_attempts[chat_id]['block_time'] - datetime.now()).seconds // 60
            bot.send_message(chat_id, f"üîí –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {remaining} –º–∏–Ω—É—Ç.")
            return
    user_states[chat_id] = 'logging_in'
    bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞:")

@bot.message_handler(commands=['logout'])
def logout(message):
    chat_id = message.chat.id
    cursor.execute("UPDATE users SET logged_in=0 WHERE chat_id=?", (chat_id,))
    conn.commit()
    bot.send_message(chat_id, "–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.", reply_markup=create_main_keyboard())

@bot.message_handler(commands=['predict'])
def predict_command(message):
    chat_id = message.chat.id
    cursor.execute("SELECT logged_in FROM users WHERE chat_id=?", (chat_id,))
    result = cursor.fetchone()
    if not result:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /register!")
        return
    if not result[0]:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /login!")
        return
    # Increment predictions_count
    cursor.execute("UPDATE users SET predictions_count = predictions_count + 1 WHERE chat_id=?", (chat_id,))
    conn.commit()
    bot.send_message(chat_id, "–ø—Ä–∏–≤–µ—Ç")

@bot.message_handler(commands=['user_info'])
def user_info(message):
    chat_id = message.chat.id
    cursor.execute("SELECT logged_in, predictions_count FROM users WHERE chat_id=?", (chat_id,))
    user = cursor.fetchone()
    if not user:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ /register!")
        return
    status = "‚úÖ –í —Å–µ—Ç–∏" if user[0] else "‚ùå –ù–µ –≤ —Å–µ—Ç–∏"
    is_admin_status = "üëë –ê–¥–º–∏–Ω" if is_admin(chat_id) else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    response = (
        f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n\n"
        f"ID: {chat_id}\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
        f"–†–æ–ª—å: {is_admin_status}\n"
        f"–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π: {user[1]}"
    )
    bot.send_message(chat_id, response, reply_markup=create_main_keyboard())

# Text handler
@bot.message_handler(content_types=['text'])
def handle_text(message):
    chat_id = message.chat.id
    text = message.text.strip()
    state = user_states.get(chat_id)

    if state == 'registering':
        hashed_password = hash_password(text)
        cursor.execute("INSERT INTO users VALUES (?, ?, ?, ?)", 
                       (chat_id, hashed_password, False, 0))
        conn.commit()
        user_states.pop(chat_id, None)
        bot.send_message(chat_id, "‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /login.")

    elif state == 'logging_in':
        cursor.execute("SELECT password FROM users WHERE chat_id=?", (chat_id,))
        result = cursor.fetchone()
        if result and check_password(result[0], text):
            cursor.execute("UPDATE users SET logged_in=1 WHERE chat_id=?", (chat_id,))
            conn.commit()
            login_attempts.pop(chat_id, None)
            bot.send_message(chat_id, "üîì –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /predict.")
        else:
            login_attempts.setdefault(chat_id, {'attempts': 0, 'block_time': datetime.now()})
            login_attempts[chat_id]['attempts'] += 1
            if login_tasks[chat_id]['attempts'] >= 3:
                login_attempts[chat_id]['block_time'] = datetime.now() + timedelta(minutes=5)
            remaining_attempts = 3 - login_attempts[chat_id]['attempts']
            bot.send_message(chat_id, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: {remaining_attempts}")
        user_states.pop(chat_id, None)

    elif state == 'awaiting_user_id_for_deletion':
        if not is_admin(chat_id):
            bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            user_states.pop(chat_id, None)
            return
        try:
            user_id = int(text)
            if user_id == chat_id:
                bot.send_message(chat_id, "‚ùå –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
            else:
                cursor.execute("DELETE FROM users WHERE chat_id=?", (user_id,))
                cursor.execute("DELETE FROM admins WHERE chat_id=?", (user_id,))
                conn.commit()
                bot.send_message(chat_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É–¥–∞–ª—ë–Ω.")
        except ValueError:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        finally:
            user_states.pop(chat_id, None)

    elif state == 'awaiting_admin_id':
        if not is_admin(chat_id):
            bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            user_states.pop(chat_id, None)
            return
        try:
            new_admin_id = int(text)
            cursor.execute("SELECT * FROM users WHERE chat_id=?", (new_admin_id,))
            if not cursor.fetchone():
                bot.send_message(chat_id, "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–Ω –¥–æ–ª–∂–µ–Ω –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.")
            else:
                cursor.execute("INSERT OR IGNORE INTO admins VALUES (?, ?)", 
                               (new_admin_id, f"admin_{new_admin_id}"))
                conn.commit()
                bot.send_message(chat_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {new_admin_id} —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
                bot.send_message(new_admin_id, "üëë –í–∞—Å –Ω–∞–∑–Ω–∞—á–∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!")
        except ValueError:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        finally:
            user_states.pop(chat_id, None)

    elif state == 'awaiting_admin_id_for_removal':
        if not is_admin(chat_id):
            bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            user_states.pop(chat_id, None)
            return
        try:
            admin_id = int(text)
            if admin_id == chat_id:
                bot.send_message(chat_id, "‚ùå –ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å –ø—Ä–∞–≤–∞ —Å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
            else:
                cursor.execute("DELETE FROM admins WHERE chat_id=?", (admin_id,))
                conn.commit()
                bot.send_message(chat_id, f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {admin_id} –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä.")
                bot.send_message(admin_id, "‚ùå –í–∞—à–∏ –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –±—ã–ª–∏ —Å–Ω—è—Ç—ã.")
        except ValueError:
            bot.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        finally:
            user_states.pop(chat_id, None)

    elif state == 'awaiting_broadcast_message':
        if not is_admin(chat_id):
            bot.send_message(chat_id, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
            user_states.pop(chat_id, None)
            return
        cursor.execute("SELECT chat_id FROM users")
        users = cursor.fetchall()
        for user in users:
            try:
                bot.send_message(user[0], f"üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞: {text}")
            except:
                continue
        bot.send_message(chat_id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        user_states.pop(chat_id, None)

# Photo handler (retained for potential future use)
@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    chat_id = message.chat.id
    cursor.execute("SELECT logged_in FROM users WHERE chat_id=?", (chat_id,))
    result = cursor.fetchone()
    if not result or not result[0]:
        bot.send_message(chat_id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ /login.")
        return

    file_info = bot.get_file(message.photo[-1].file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    img_path = f"temp_{chat_id}.jpg"
    with open(img_path, 'wb') as f:
        f.write(downloaded_file)

    try:
        prediction, confidence = predict_image(img_path)
        cursor.execute("UPDATE users SET predictions_count = predictions_count + 1 WHERE chat_id=?", (chat_id,))
        conn.commit()
        bot.send_message(chat_id, f"üîç –ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏: {prediction} (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {confidence:.2f}%)")
    except Exception as e:
        bot.send_message(chat_id, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏: {str(e)}")
    finally:
        if os.path.exists(img_path):
            os.remove(img_path)

# Prediction function (retained for potential future use)
def predict_image(img_path):
    img = image.load_img(img_path, target_size=(200, 200))
    x = image.img_to_array(img)
    x = np.expand_dims(x, axis=0) / 255.0
    prediction = model.predict(x)
    return ("–ø–∞–Ω–¥–∞ üêº", (1 - prediction[0][0]) * 100) if prediction[0] < 0.5 else ("—á–µ–ª–æ–≤–µ–∫ üë§", prediction[0][0] * 100)

# Start bot
bot.polling(none_stop=True)